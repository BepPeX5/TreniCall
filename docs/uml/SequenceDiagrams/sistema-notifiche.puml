@startuml
!theme plain
title TreniCal - Sequence Diagram: Sistema Notifiche Real-time

actor Cliente as C
participant "Client GUI" as GUI
participant "gRPC Client" as GC
participant "NotificaServiceImpl" as NSI
participant "Admin Console" as ADMIN
participant "File System" as FS
participant "StreamObserver" as SO

C -> GUI: Clicca tab "Gestione Notifiche"
GUI -> GUI: addFollowTrainTab()
C -> GUI: Clicca "Carica Treni"
GUI -> GC: listaTreniAttivi()
GC -> NSI: listaTreniAttivi(Empty)
NSI -> "TrenoRepository": findAll()
"TrenoRepository" --> NSI: List<Treno>
NSI --> GC: ListaTreniResponse
GC --> GUI: Popola ComboBox treni

C -> GUI: Seleziona treno e clicca "Attiva Notifiche"
GUI -> GC: seguiTreno(clienteId, trenoCodice, streamObserver)

GC -> NSI: seguiTreno(request, responseObserver)
NSI -> NSI: globalSubscribers.put(clienteId, responseObserver)
NSI -> NSI: subscribersByTrain.get(codice).add(responseObserver)
NSI -> SO: onNext(ack: "Registrato per treno + notifiche admin")
SO --> GUI: Mostra "Ora stai seguendo il treno..."

GUI -> GC: seguiTreno(clienteId, "", streamObserver)
GC -> NSI: seguiTreno(request, responseObserver)
NSI -> NSI: globalSubscribers.put(clienteId, responseObserver)

loop Ogni 45 secondi
    NSI -> NSI: pushSimulatedUpdates()
    NSI -> NSI: pushNotificheTreniSeguiti()
    loop Per ogni treno seguito
        NSI -> NSI: randomUpdateMessage(codice)
        NSI -> SO: onNext("[TRENI SEGUITI] Treno X: in orario")
        SO --> GUI: Appare in notificheArea
    end
    NSI -> NSI: pushNotificheTreniAcquistati()
    NSI -> "BigliettoRepository": findAll()
    NSI -> NSI: getTreniConBiglietti(clienteId)
    loop Per ogni cliente con biglietti
        NSI -> SO: onNext("[TRENI ACQUISTATI] Treno Y: arrivo previsto...")
        SO --> GUI: Appare in notificheArea
    end
end

loop Ogni secondo
    NSI -> NSI: checkAdminNotifications()
    NSI -> FS: readAllLines(NOTIFICATIONS_FILE)
    alt File contiene notifiche
        FS --> NSI: List<String> notifiche
        loop Per ogni riga notifica
            NSI -> NSI: processAdminNotification(line)
            alt Notifica per treno specifico
                NSI -> NSI: inviaNotificaAdminATreno(trainId, eventType, message)
                NSI -> SO: onNext("[ADMIN-ALERT] Treno X: ritardo 15 minuti")
                SO --> GUI: Appare notifica admin in tempo reale
            else Broadcast globale
                NSI -> NSI: inviaNotificaBroadcastGlobale(message, eventType)
                loop Per tutti i client connessi
                    NSI -> SO: onNext("[BROADCAST] Servizio interrotto linea Nord")
                    SO --> GUI: Appare broadcast globale
                end
            end
        end
        NSI -> FS: truncate(NOTIFICATIONS_FILE)
    else File vuoto
        FS --> NSI: Empty
    end
end

ADMIN -> FS: write("TR001|RITARDO|Ritardo di 15 minuti causa maltempo")
FS --> ADMIN: File scritto

loop Ogni minuto
    "PrenotazioneService" -> "PrenotazioneService": verificaScadenzeImminenti()
    "PrenotazioneService" -> NSI: inviaNotificaScadenza(clienteId, messaggio, trenoId)
    NSI -> SO: onNext("[SCADENZA-ALERT] Prenotazione scade tra 2 minuti")
    SO --> GUI: Notifica urgente scadenza
end

C -> GUI: Chiude applicazione
GUI -> GC: logoutNotifiche(clienteId)
GC -> NSI: logoutNotifiche(request)
NSI -> NSI: globalSubscribers.remove(clienteId)
NSI -> NSI: subscribersByTrain.removeIf(observer == removed)
NSI --> GC: LogoutResponse(success=true)

@enduml